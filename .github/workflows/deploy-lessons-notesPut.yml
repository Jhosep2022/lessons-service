name: Deploy lessons-notesPut Lambda (direct)

on:
  push:
    branches: [main, qa]

jobs:
  deploy:
    name: Deploy lessons notesPut
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'dev' || 'qa' }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: '20' }

      - name: ðŸ“¦ Install deps (subdir)
        if: ${{ hashFiles('lessons-service/package.json') != '' }}
        working-directory: lessons-service
        run: |
          if [ -f package-lock.json ]; then npm ci --omit=dev; else npm i --omit=dev; fi
      - name: ðŸ“¦ Install deps (root)
        if: ${{ hashFiles('lessons-service/package.json') == '' && hashFiles('package.json') != '' }}
        run: |
          if [ -f package-lock.json ]; then npm ci --omit=dev; else npm i --omit=dev; fi

      - name: ðŸ“¦ Package (subdir)
        if: ${{ hashFiles('lessons-service/package.json') != '' }}
        working-directory: lessons-service
        run: zip -r lessons-notesPut.zip src/ node_modules/ package.json package-lock.json || true
      - name: ðŸ“¦ Package (root)
        if: ${{ hashFiles('lessons-service/package.json') == '' && hashFiles('package.json') != '' }}
        run: zip -r lessons-notesPut.zip src/ node_modules/ package.json package-lock.json || true

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: ðŸ”Ž Resolve ENV (courses table)
        id: envs
        shell: bash
        run: |
          set -euo pipefail
          STAGE=${{ github.ref == 'refs/heads/main' && 'dev' || 'qa' }}
          TABLE=$(aws ssm get-parameter --name "/novalearn/${STAGE}/COURSES_TABLE_NAME" \
                    --query "Parameter.Value" --output text 2>/dev/null || echo "None")
          if [ "$TABLE" = "None" ]; then
            TABLE=$(aws cloudformation list-exports \
              --query "Exports[?Name=='courses-service-${STAGE}-CoursesTableName'].Value | [0]" \
              --output text 2>/dev/null || echo "None")
          fi
          [ "$TABLE" = "None" ] && TABLE="novalearn-courses-${STAGE}"
          echo "STAGE=$STAGE" >> $GITHUB_OUTPUT
          echo "TABLE=$TABLE" >> $GITHUB_OUTPUT

      - name: ðŸš€ Deploy (subdir)
        if: ${{ hashFiles('lessons-service/package.json') != '' }}
        working-directory: lessons-service
        run: |
          STAGE="${{ steps.envs.outputs.STAGE }}"; TABLE="${{ steps.envs.outputs.TABLE }}"
          aws lambda update-function-configuration \
            --function-name lessons-service-$STAGE-notesPut \
            --environment "Variables={STAGE=\"$STAGE\",COURSES_TABLE_NAME=\"$TABLE\",ALLOWED_ORIGINS=\"*\"}"
          aws lambda update-function-code \
            --function-name lessons-service-$STAGE-notesPut \
            --zip-file fileb://lessons-notesPut.zip \
            --publish
      - name: ðŸš€ Deploy (root)
        if: ${{ hashFiles('lessons-service/package.json') == '' && hashFiles('package.json') != '' }}
        run: |
          STAGE="${{ steps.envs.outputs.STAGE }}"; TABLE="${{ steps.envs.outputs.TABLE }}"
          aws lambda update-function-configuration \
            --function-name lessons-service-$STAGE-notesPut \
            --environment "Variables={STAGE=\"$STAGE\",COURSES_TABLE_NAME=\"$TABLE\",ALLOWED_ORIGINS=\"*\"}"
          aws lambda update-function-code \
            --function-name lessons-service-$STAGE-notesPut \
            --zip-file fileb://lessons-notesPut.zip \
            --publish
